module Drums
using MusicManipulations

# all pitches of digitally connected instruments that support extra velocities
const DIGITAL = [0x26,0x28,0x33,0x35,0x3b]

"""
    getnotes_td50(track::MIDITrack, tpq = 960)

Get notes from midi track. Take care of Roland TD-50's ability to have velocities up to 159 for snare and ride.
"""
function getnotes_td50(track::MIDI.MIDITrack, tpq = 960)
    notes = MoreVelNote[]
    tracktime = UInt(0)
    extravel = 0
    for (i, event) in enumerate(track.events)
        tracktime += event.dT
        # Read through events until a noteon with velocity higher tha 0 is found
        if isa(event, MIDIEvent) && event.status & 0xF0 == NOTEON && event.data[2] > 0
            duration = UInt(0)
            #Test if the next event is an extra velocity event and modify velocity if needed.
            if event.data[1] in DIGITAL && event.data[2]==0x7f && track.events[i+1].status==0xb0 && track.events[i+1].data[1]==0x58
                extravel = floor(UInt8,track.events[i+1].data[2]/2)
                if extravel > 32
                    extravel = 32
                end
            end
            #Test if the previous event is an extra velocity event and modify velocity if needed.
            if i>2 #first event is alwas METAEvent
                if event.data[1] in DIGITAL && event.data[2]==0x7f && track.events[i-1].status==0xb0 && track.events[i-1].data[1]==0x58
                    extravel = floor(UInt8,track.events[i-1].data[2]/2)
                    if extravel > 32
                        extravel = 32
                    end
                end
            end
            for event2 in track.events[i+1:length(track.events)]
                duration += event2.dT
                # If we have a MIDI event & it's a noteoff (or a note on with 0 velocity), and it's for the same note as the first event we found, make a note
                # Many MIDI files will encode note offs as note ons with velocity zero
                if isa(event2, MIDI.MIDIEvent) && (event2.status & 0xF0 == MIDI.NOTEOFF || (event2.status & 0xF0 == MIDI.NOTEON && event2.data[2] == 0)) && event.data[1] == event2.data[1]
                    push!(notes, MoreVelNote(event.data[1], duration, tracktime, event.status & 0x0F, event.data[2]+extravel))
                    break
                end
            end
            extravel = 0
        end
    end
    sort!(notes, lt=((x, y)->x.position<y.position))
    return Notes(notes, tpq)
end


"""
    rm_hihatfake(notes::MIDI.Notes, BACK = 100, FORW = 100, CUTOFF = 0x16)

Remove fake tip notes generated by Hihat at certain actions by spotting them and
just removing every Hihat Head event with velocity less than `CUTOFF`and position
maximum `BACK` ticks before or `FORW` ticks after foot close.
"""
function rm_hihatfake!(notes::MIDI.Notes, BACK = 100, FORW = 100, CUTOFF = 0x16)

    #first map special closed notes
    for note in notes
        if note.value == 0x16
            note.value = 0x1a
        elseif note.value == 0x2a
            note.value = 0x2e
        end
    end
    #then look for fake notes
   i = 1
   deleted = 0
   len = length(notes)
   while i <= len
      #find foot close
      if notes[i].value == 0x2c || notes[i].value == 0x1a
         #go back and remove all fake tip strokes
         j = i-1
         #search all notes in specified BACK region
         while j>0 && notes[i].position-notes[j].position < BACK
            #if they are quiet enough
            if notes[j].value == 0x2e && notes[j].velocity <= CUTOFF
               #remove them
               deleteat!(notes.notes,j)
               deleted += 1
               i-=1
               len-=1
            else
               j-=1
            end
         end
         #go forward and remove all fake tip strokes
         j=i+1
         #search all notes in specified FORW region
         while j<=len && notes[j].position-notes[i].position < FORW
            #if they are quiet enough
            if notes[j].value == 0x2e && notes[j].velocity <= CUTOFF
               #remove them
               deleteat!(notes.notes,j)
               deleted += 1
               len-=1
            else
               j+=1
            end
         end
      end
      i+=1
   end
   println("deleted $(deleted) fake notes")
end


# Map the pitches of midinotes to Instruments of Roland TD-50
const MAP_TD50 = Dict{UInt8,String}(
    0x16=>"Hihat Rim (closed)",
    0x1a=>"Hihat Rim",
    0x24=>"Kick",
    0x25=>"Snare RimClick",
    0x26=>"Snare",
    0x28=>"Snare Rimshot",
    0x2a=>"Hihat Head (closed)",
    0x2b=>"Tom 3",
    0x2c=>"Hihat Foot Close",
    0x2d=>"Tom 2",
    0x2e=>"Hihat Head",
    0x2f=>"Tom 2 Rimshot",
    0x30=>"Tom 1",
    0x31=>"Cymbal 1",
    0x32=>"Tom 1 Rimshot",
    0x33=>"Ride Head",
    0x34=>"Cymbal 2",
    0x35=>"Ride Bell",
    0x37=>"Cymbal 1",
    0x39=>"Cymbal 2",
    0x3a=>"Tom 3 Rimshot",
    0x3b=>"Ride Rim")

# All posible pitches in an Array
const ALLPITCHES_TD50 = collect(keys(MAP_TD50))

# Map the pitches to numbers for plotting in a graph
const GRAPHMAP_TD50 = Dict{UInt8,UInt8}(
    0x16=>8,
    0x1a=>5,
    0x24=>0,
    0x25=>3,
    0x26=>1,
    0x28=>2,
    0x2a=>7,
    0x2b=>16,
    0x2c=>6,
    0x2d=>14,
    0x2e=>4,
    0x2f=>15,
    0x30=>12,
    0x31=>18,
    0x32=>13,
    0x33=>9,
    0x34=>19,
    0x35=>11,
    0x37=>18,
    0x39=>19,
    0x3a=>17,
    0x3b=>10)

# names of Instruments (order according to graphmap) for updating ticks in graph
const GRAPHTICKS_TD50 =    ["Kick","Snare","Snare Rimshot","Snare RimClick","Hihat Head",
                 "Hihat Rim","Hihat Foot Close","Hihat Head (closed)",
                 "Hihat Rim (closed)","Ride Head","Ride Rim",
                 "Ride Bell","Tom 1","Tom 1 Rimshot","Tom 2",
                 "Tom 2 Rimshot","Tom 3","Tom 3 Rimshot","Cymbal 1","Cymbal 2"]


end
